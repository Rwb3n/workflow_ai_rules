```
Hybrid_AI_OS v1.3  – minimal tokens, full integrity  

OBJ   A→B→C→V→(loop|I)  

F
  s   state.json                     // opt-lock
  l   logs/log_unit_<n>.jsonl        // JSONL, rollover
  r   registry/<dom>/<id>.json       // opt-lock
  rs  registry_summary.json          // opt-lock (id→path)
  p/  plans/plan_<id>.json           // opt-lock
  ki  known_issues.json              // opt-lock

S  (state.json)
  v   int  version
  g   int  globalEvent
  ln  int  logEntriesInCurrentFile
  max int  logRolloverThreshold
  ph  A|B|C|V|I
  st  READY|BUSY|BLK_CON|BLK_SUM|BLK_MAX|ERROR
  cp  str? currentPlanId
  ct  str? currentTaskId
  rt  obj  {taskId:int}
  iss obj  {issueId:payload}   // active cache
  err str? errorContext

PLAN  (p/plan_<id>.json)
  v   int
  id  str
  goal str
  tasks [ { id, desc, crit:[…], st:PEND|DONE, rt:int } ]
  evt int

ART  (r/<dom>/<id>.json)
  v   int
  id  str
  dom str
  pu  str   purpose
  t   str   type
  loc str   location
  if  [str] interfaces
  dep [id]  dependencies
  pre [id]  prerequisites
  depd[id]  dependents
  kdd str   keyDesignDecisions
  evt int
  st  str   status
  ki  [id]  activeKnownIssues
  *loc file embeds annotations: purpose, logic, dep refs, dependents(opt), issue links

ISS  (ki.issues[issueId])
  k   LINT|RUN|OTH
  rule str
  art id
  loc str
  why str
  intro int
  st  ACT|RES
  res int|null

PH  A ANALYZE B BLUEPRINT C CONSTRUCT V VALIDATE I IDLE  

OUT  (task output → REG)
  id   str  artifact id
  dom  str  domain
  loc  str  path/content
  type str
  pu?  str
  if?  [str]
  dep? [id]

R
  INIT   load s else new; mkdir l,r,p; mk rs,ki if new; LOAD_ISS; sync g from last log; LOG("Session",I); st=READY; SAVE
  LOG(m,L) g++; ln++; append {"id":g,"L":L,"ph":ph,"plan":cp,"task":ct,"msg":m}→l; if ln≥max→roll; if L=E→err=m[:100]; st=ERROR; SAVE
  SAVE     v++; OPT(s)
  OPT(x)   read file; x.v<=disk.v? CONFLICT:file←x
  CONFLICT LOG("Lock "+file,E); st=BLK_CON
  SET(p2)  if p2≠ph→LOG("Phase→"+p2,I); ph=p2; st=READY; if p2∉{V,I}→ct=null; SAVE

  A   BUSY; SAVE; LOG("Analyze",I); AI analyze goal; LOG("Done",I); SET(B)

  B   BUSY; SAVE; planId="plan_"+g
      plan={v:1,id:planId,goal:...,tasks:[{id:"t1",desc:...,crit:[…],st:"PEND",rt:0},…],evt:g}
      OPT(plan); LOG("Plan "+planId,I); cp=planId; SET(C)

  C   cp? load plan : (LOG("No plan",W); SET(I);)
      next=first task st==PEND; if !next→DONE
      ct=next.id; BUSY; SAVE; LOG("Exec "+ct,I)
      out=AI do task
      if out.id→REG(out)
      LOG("Exec "+ct+" fin",I); st=READY; SET(V)

  REG(out)
      art={v:1,id:out.id,dom:out.dom,pu:out.pu||"",t:out.type,loc:out.loc,if:out.if||[],dep:out.dep||[],
           pre:[],depd:[],kdd:"",evt:g,st:"UnderConstruction",ki:[]}
      OPT(art_file)                              // step-A
      if st==BLK_CON return
      load rs; rs.map[out.id]=art_path; rs.v++; rs.evt=g
      OPT(rs)                                    // step-B
      if st==BLK_CON→LOG("Summary conflict",E); st=BLK_SUM

  V   cp&&ct? load plan : (LOG("Review ctx miss",W); SET(C);)
      BUSY; SAVE; LOG("Review "+ct,I)
      pass=AI review task vs crit
      t_idx=index of ct in plan.tasks
      if pass
          plan.tasks[t_idx].st="DONE"; plan.tasks[t_idx].rt=rt.get(ct,0)
          plan.evt=g; plan.v++; OPT(plan); LOG("PASS "+ct,I); ct=null; SET(C)
      else
          rt[ct]=rt.get(ct,0)+1; plan.tasks[t_idx].rt=rt[ct]; plan.evt=g; plan.v++; OPT(plan)
          LOG("FAIL "+ct,W); rt[ct]<MAX? SET(C): (st=BLK_MAX; LOG("Retry max "+ct,E))

  DONE  LOG("Plan "+cp+" COMPLETE",I); cp=null; ct=null; SET(I)

ISSUE FLOW
  RECORD(id,payload)
      ki.issues[id]=payload; ki.v++; OPT(ki); iss[id]=payload; link(payload.art,ADD,id)
  RESOLVE(id)
      ki.issues[id].st="RES"; ki.issues[id].res=g; ki.v++; OPT(ki); del iss[id]; link(ki.issues[id].art,REM,id)
  link(aid,ACT,id)
      load art; ACT==ADD? push id : remove id; art.ki sort; art.evt=g; art.v++; OPT(art)

LOAD_ISS  read ki; iss←ACTIVE; LOG("Issues "+len(iss),I)

CONSISTENCY_CHECK  iterate rs vs r/, repair orphans, LOG result

ANNO_GEN  within C: AI embeds annotations in out.loc files
ANNO_VAL  within V: AI verifies annotations

Directives  one state file, opt-lock on all JSON, per-task retry, log rollover, sharded registry + summary, known-issues ledger, thorough annotations, blunt edits
```
