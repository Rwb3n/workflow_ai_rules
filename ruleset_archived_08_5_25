````markdown
## Preamble  
This ruleset governs the AI agent’s operation for any project medium, emphasizing disciplined phase transitions, robust state management, proactive quality control, and a comprehensive artifact registry with a codebase index. Log, state, and registry information are maintained in separate, dedicated files.

---

## Dedicated Files  

- **`codebase_state.md`**  
  Contains the current operational state of the AI, including:
  - Phase  
  - Status  
  - Retry counts  
  - Global log entry counter  

- **`codebase_log.md`**  
  Chronological, append-only log of all significant AI actions and events.

- **`codebase_registry.md`**  
  Detailed information about all project artifacts/modules, their relationships, and an index mapping them to their locations in the codebase.

---

## State Variables (in `codebase_state.md`)  

```yaml
State.LogEntryCounter: Integer (starts at 0; increments for each log entry)
State.Phase: Current workflow phase
State.Status: Operational status (READY, NEEDS_APPROVAL, BLOCKED_*, etc.)
State.RetryCount: Integer (current retry attempts on a specific task)
# Other contextual state as needed
````

---

## Core Workflow Phases

* **ANALYZE**
* **BLUEPRINT**
* **CONSTRUCT**
* **VALIDATE**

> **Clarification for PHASE\_BLUEPRINT**
> Must specify for each planned artifact/module:
>
> 1. Purpose and scope
> 2. Structure and organization
> 3. Planned Location/Path (for `codebase_registry.md` index)
> 4. Interfaces (inputs, outputs)
> 5. Dependencies (other artifacts/modules)
> 6. Prerequisites (conditions or artifacts required)
> 7. Acceptance criteria
>
> **Constraint:** No implementation until blueprint is approved.

---

## Transition Rules

* **TRANSITION\_BY\_COMMAND**
* **TRANSITION\_ON\_BLOCKER**
* Logging via **RULE\_LOG\_EVENT** to `codebase_log.md`

---

## Initialization & Resumption

### INIT\_NEW\_PROJECT

**Trigger:** No prior `codebase_state.md` exists
**Action:**

1. Initialize `codebase_state.md` with default headings; set `State.LogEntryCounter = 0`.
2. Create empty `codebase_log.md`.
3. Create `codebase_registry.md` with headings:

   ```markdown
   # Artifact Registry & Codebase Index
   ## Codebase Index
   ## Artifact Details
   ```
4. Call `RULE_LOG_EVENT`: “Initialized new session. Core files created. Prompting for requirements.”
5. Prompt for requirements.
6. Set `State.Phase = ANALYZE`, `State.Status = READY`.
7. Call `RULE_LOG_EVENT`: “State.Phase set to ANALYZE. State.Status set to READY.”
8. Persist `codebase_state.md`.

### RESUME\_PROJECT

**Trigger:** Existing `codebase_state.md` found
**Action:**

1. Load `codebase_state.md`.
2. Assume `codebase_log.md` and `codebase_registry.md` exist.
3. Call `RULE_LOG_EVENT`: “Resumed session. Current Phase: \<State.Phase>, Status: \<State.Status>.”
4. Report current phase and status.
5. Prompt for next action.

---

## State Management & Logging

### RULE\_LOG\_EVENT

**Action:**

1. Increment `State.LogEntryCounter`.
2. Append to `codebase_log.md`:

   ```
   [<State.LogEntryCounter>] <Descriptive message>
   ```
3. Persist `codebase_state.md`.

### RULE\_STATE\_PERSISTENCE

**Trigger:** After critical state changes or periodically
**Action:**

1. Persist `codebase_state.md`.
2. Call `RULE_LOG_EVENT`: “Core AI state persisted to codebase\_state.md.”

---

## Error Handling & Recovery

* AUTO\_FIX\_THRESHOLD
* ESCALATION
* UNKNOWN\_FAIL
* RETRY\_RESET
* ENVIRONMENT\_TOOL\_FEEDBACK\_AWARENESS
  *All use `RULE_LOG_EVENT` for logging.*

---

## Quality Validation

* VERIFICATION\_CHECKS
* QUALITY\_FAILURE\_HANDLING
  *All use `RULE_LOG_EVENT` for logging.*

---

## Artifact Annotation Rules

* ANNOTATION\_REQUIREMENT
* ANNOTATION\_VALIDATION
  *All use `RULE_LOG_EVENT`.*

---

## Task Complexity & Decomposition

* COMPLEXITY\_DECOMPOSITION
* COMPLEXITY\_VALIDATION
  *All use `RULE_LOG_EVENT`.*

---

## Artifact Generation Rules

* CHUNKED\_GENERATION
* GENERATION\_RETRY
  *All use `RULE_LOG_EVENT`.*

---

## Retry Mechanism

* RETRY\_ATTEMPT
* MAX\_RETRIES\_REACHED\_HANDLER
  *All use `RULE_LOG_EVENT`.*

---

## Artifact Registry & Codebase Index (`codebase_registry.md`)

```markdown
# Artifact Registry & Codebase Index

## Codebase Index
<!-- Populated by RULE_REGISTRY_MAINTENANCE -->
* **[Identifier]:** `path/to/file`

## Artifact Details

### [Identifier: ExampleArtifact]
* **Purpose:** ...  
* **Type/Medium:** ...  
* **Location:** `...`  
* **Interfaces:**  
  - ...  
* **Dependencies:**  
  - ...  
* **Prerequisites:** ...  
* **Dependents:**  
  - ...  
* **Key Design Decisions/Notes:** ...  
* **Version/Last Modified:** vX.X / YYYY-MM-DD HH:MM:SS  
* **Status:** ...
```

### RULE\_REGISTRY\_MAINTENANCE

**Trigger:**

1. Approved blueprint artifact definition
2. Completion/validation in CONSTRUCT/VALIDATE
3. Modification or relocation
   **Action:**
4. Call `RULE_LOG_EVENT`: “Registry maintenance triggered for artifact <Identifier> due to <reason>.”
5. Load `codebase_registry.md` in memory.
6. Update “Codebase Index” entry.
7. Update “Artifact Details” section.
8. Update dependents for related artifacts.
9. Check for circular dependencies; on detection:

   * Call `RULE_LOG_EVENT`: “CRITICAL: Circular dependency detected…”
   * Set `State.Status = BLOCKED_CIRCULAR_DEPENDENCY`.
   * Abort registry write.
10. Persist `codebase_registry.md`.
11. Call `RULE_LOG_EVENT`: “Successfully updated and persisted codebase\_registry.md for artifact <Identifier>.”

### RULE\_REGISTRY\_ACCURACY\_CHECK

**Trigger:** During VALIDATE or before milestones
**Action:**

1. Call `RULE_LOG_EVENT`: “Initiating registry accuracy check.”
2. Load `codebase_registry.md`.
3. Cross-reference actual artifacts against registry.
4. Call `RULE_LOG_EVENT`: “Registry accuracy check results: <summary>.”
5. If discrepancies, flag and trigger maintenance or notify.

---

## Session Metrics

* SESSION\_SUMMARY\_METRICS (includes “Number of Registry Entries”, “Registry Integrity Issues Found”)
  *All use `RULE_LOG_EVENT`.*

```
```
