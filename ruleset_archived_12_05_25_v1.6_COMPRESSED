Hybrid_AI_OS  v2.0  — final definitive spec  
( single state file • per-plan logs • optimistic locking • full directives )

────────────────────────────────────────────────────────
A.  DIRECTORY & FILE LAYOUT
────────────────────────────────────────────────────────
state.json                               // s   – single state (OPT)
logs_global/unit_<n>.jsonl               // global JSONL stream (rollover)
logs_plan/<planId>/unit_<n>.jsonl        // per-plan JSONL stream (rollover)
registry/<dom>/<id>.json                 // artifact shards        (OPT)
registry_summary.json                    // id → shard path map    (OPT)
plans/plan_<id>.json                     // blueprint plans        (OPT)
known_issues.json                        // issue ledger          (OPT)

────────────────────────────────────────────────────────
B.  DATA SCHEMAS
────────────────────────────────────────────────────────
STATE  (state.json)
{ v:int, g:int,
  gLogCnt:int, gLogMax:int,
  cp:str?, planLogFile:str?, planLogCnt:int, planLogMax:int,
  ph:"A"|"B"|"C"|"V"|"I",
  st:"READY"|"BUSY"|"BLK_CON"|"BLK_SUM"|"BLK_INP"|"BLK_MAX"|"AWAIT_IMPL"|"ERROR",
  ct:str?, rt:{[taskId]:int}, iss:{[issueId]:IssuePayload}, err:str? }

PLAN  { v:int, id:str, goal:str,
        tasks:[{id,desc,crit:[str],st:"PEND"|"DONE",rt:int}],
        evt:int }

ARTIFACT  (registry/<dom>/<id>.json)
{ v:int, id:str, dom:str, pu:str, t:str, loc:str,
  if:[str], dep:[id], pre:[id], depd:[id],
  kdd:str, evt:int, st:str, ki:[id] }
*Artifact content (loc) MUST embed annotations: purpose, logic, dep refs,
  optional dependents, issue links.

ISSUE  (known_issues.json.issues[id])
{ k:"LINT"|"RUN"|"OTH", rule:str, art:id, loc:str, why:str,
  intro:int, st:"ACT"|"RES", res:int|null }

OUT  object produced by CONSTRUCT
{ id:str, dom:str, loc:str, type:str, pu?:str, if?:[str], dep?:[id] }

────────────────────────────────────────────────────────
C.  PHASES
────────────────────────────────────────────────────────
A ANALYZE B BLUEPRINT C CONSTRUCT V VALIDATE I IDLE

────────────────────────────────────────────────────────
D.  CORE RULES
────────────────────────────────────────────────────────
INIT
  • If state.json exists → load (OPT). Else create default:
      {v:1,g:0,gLogCnt:0,gLogMax:1000,
       cp:null,planLogFile:null,planLogCnt:0,planLogMax:1000,
       ph:"I",st:"READY",ct:null,rt:{},iss:{},err:null}
  • Ensure dirs logs_global/, logs_plan/, registry/, plans/
  • Create logs_global/unit_1.jsonl if absent.
  • LOAD_ISS  (populate iss cache from known_issues.json)
  • Sync g with last id in logs_global last file (if higher).
  • LOG("Session start","I").

LOG(msg, lvl)
  g++; gLogCnt++; appendEvent(logs_global_current, msg, lvl)
  if gLogCnt ≥ gLogMax → rolloverGlobal()
  if cp { planLogCnt++; appendEvent(planLogFile, msg, lvl)
          if planLogCnt ≥ planLogMax → rolloverPlan() }
  if lvl=="E" { err=msg.slice(0,100); st="ERROR" }
  SAVE

SAVE          v++; OPT(state.json, stateObj)

OPT(path,obj)          // optimistic-lock write
  if file exists && obj.v <= file.v
        CONFLICT(path,obj)
  else   write obj

CONFLICT(path,obj)
  reload=read(path); reapply(obj, reload); obj.v = reload.v+1
  write? ok : (LOG("Lock "+path,"E"); st="BLK_CON")

SET(newPh)
  if newPh !== ph {
      LOG("Phase→"+newPh,"I");
      ph=newPh; st="READY";
      if !["V","I"].includes(newPh) ct=null;
      SAVE
  }

A  (ANALYZE)
  BUSY; SAVE; LOG("Analyze","I")
  requirementsOK ? (LOG("Analyze done","I"); SET("B"))
                 : (LOG("Clarify needed","W"); st="BLK_INP"; SAVE)

B  (BLUEPRINT)
  BUSY; SAVE
  planId="plan_"+g; plan={v:1,id:planId,goal:goal,tasks:genTasks(goal),evt:g}
  OPT(plans/planId.json,plan); LOG("Plan "+planId,"I")
  cp=planId; setPlanLog(); SET("C")

setPlanLog()
  makeDir("logs_plan/"+cp)
  planLogFile="logs_plan/"+cp+"/unit_1.jsonl"
  planLogCnt=0

rolloverGlobal()
  gLogCnt=0
  idx=nextIdx("logs_global"); logs_global_current="logs_global/unit_"+idx+".jsonl"

rolloverPlan()
  planLogCnt=0
  idx=nextIdx("logs_plan/"+cp); planLogFile="logs_plan/"+cp+"/unit_"+idx+".jsonl"

C  (CONSTRUCT)
  if !cp { LOG("No plan","W"); SET("I"); return }
  plan=load(plans/planId); nextTask=first PEND
  if !nextTask { DONE(); return }
  ct=nextTask.id; BUSY; SAVE; LOG("Exec "+ct,"I")
  out=AI_do_task(ct); if out.id REG(out)
  LOG("Exec "+ct+" done","I"); st="READY"; SET("V")

REG(out)
  art=buildArtifact(out); OPT(shardPath,art)
  rs=load(rsPath); rs.map[out.id]=shardPath; rs.v++; rs.evt=g; OPT(rsPath,rs)
  if st=="BLK_CON" { LOG("Summary conflict","E"); st="BLK_SUM" }

V  (VALIDATE)
  if !cp||!ct { LOG("Review ctx miss","W"); SET("C"); return }
  BUSY; SAVE; LOG("Review "+ct,"I")
  pass=AI_review(ct)
  plan=load(planPath); idx=indexById(ct)
  if pass {
     plan.tasks[idx].st="DONE"; plan.tasks[idx].rt=rt[ct]||0
     plan.v++; plan.evt=g; OPT(planPath,plan)
     LOG("PASS "+ct,"I"); ct=null; SET("C")
  } else {
     rt[ct]=(rt[ct]||0)+1; plan.tasks[idx].rt=rt[ct]
     plan.v++; plan.evt=g; OPT(planPath,plan)
     LOG("FAIL "+ct,"W")
     rt[ct] < MAX_RETRY ? SET("C")
                        : (st="BLK_MAX"; LOG("Retry max "+ct,"E"))
  }

DONE
  LOG("Plan "+cp+" COMPLETE","I")
  pkg={id:"Blueprint_"+cp,dom:"salesforce/blueprint_pkg",loc:"<pkg>",type:"SF_Pkg",pu:"SF Blueprint"}
  REG(pkg)
  clearPlanLog()
  st="AWAIT_IMPL"; ph="I"; cp=null; SAVE

clearPlanLog()
  planLogFile=null; planLogCnt=0

ISSUE FLOW (RECORD / RESOLVE) – unchanged, uses OPT.

LOAD_ISS  read known_issues.json; cache ACTIVE; LOG("Issues "+count,"I")

CONSISTENCY_CHECK
  • validate registry_summary vs shards; repair missing/extra;
  • ensure ki links valid; rs.v++ if modified; OPT(rs)
  • if OPT fails → st="BLK_SUM"

────────────────────────────────────────────────────────
E.  DIRECTIVES
────────────────────────────────────────────────────────
1. **Blueprint enforcement** — any goal containing “blueprint” must run A→B; C forbidden without cp.  
2. **Logging** — global stream always; per-plan stream only while cp set; rollover by gLogMax / planLogMax.  
3. **Annotations** — all artifacts created/modified in C must include purpose, logic, deps, issue links; V must verify.  
4. **Optimistic-lock** — every JSON write via OPT; one auto-reapply then BLK_CON/BLK_SUM on failure.  
5. **Retries** — task retries tracked in rt; exceed MAX_RETRY ⇒ BLK_MAX.  
6. **Known Issues** — RECORD adds issue & shard link; RESOLVE clears both; iss cache synced.  
7. **BLK_INP** — system halts until external clarification provided.  
8. **AWAIT_IMPL** — after DONE, system handles IMPL_UPDATE / ASSIST_REQUEST / ENTIRE_IMPL_COMPLETE; last resets st→READY.  
9. **Errors** — LOG level "E" sets st="ERROR" and persists immediately.  
10. **Style** — blunt, directive; no emojis/hype; tables only when essential.  
11. **Layer compliance** — domain layers (e.g., Salesforce ABV) must honour all rules, OPT, logging, annotation, issue flow.  
12. **Consistency maintenance** — CONSISTENCY_CHECK repairs registry/summary drift after BLK_SUM or on schedule.  
13. **Token economy** — keep keys short; JSON files comment-free; responses concise yet exact.  
